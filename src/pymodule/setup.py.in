# -*- coding: utf-8 -*-
#
# setup.py
#
# This file is part of DeNSE.
#
# Copyright (C) 2019 SeNEC Initiative
#
# DeNSE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# DeNSE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DeNSE. If not, see <http://www.gnu.org/licenses/>.

import os
import platform
import sysconfig
from distutils.command.build_ext import build_ext
from setuptools import setup, Extension
try:
    from setuptools import find_namespace_packages as getpackages
except ImportError:
    from setuptools import find_packages as getpackages

import numpy as np

try:
    from Cython.Build import cythonize
    import setuptools
    version = setuptools.__version__
    version = int(version[:version.index(".")])
    with_cython = True if version >= 18 else False
    from _cpp_header import clean_cpp
    with_cython = True
except ImportError:
    with_cython = False


# ------------------- #
# Multiplatform flags #
# ------------------- #

# compiler options

copt =  {
    'msvc': [
        '/openmp', '/Od', '/fp:precise', '/permissive-', '/Zc:twoPhase-',
        '/MDd' if "@CMAKE_BUILD_TYPE@" == "Debug" else "/MD", "-Zi", "/Ox",
        '/D_ITERATOR_DEBUG_LEVEL=2' if "@CMAKE_BUILD_TYPE@" == "Debug" else "",
        '/std:c++14',
    ],
    'unix': [
        '-std=c++14', '-Wno-cpp', '-Wno-unused-function', '-fopenmp',
        '-ffast-math', '-msse', '-ftree-vectorize', '-O2', '-g', "-fPIC",
    ],
}

lopt =  {
    'unix': ['-fopenmp'],
	'msvc': ['/subsystem:windows', "/debug"],
}

# custom class

class CustomBuildExt(build_ext):

    def build_extensions(self):
        # find environment variable for compiler
        c = os.environ.get('CXX', None)
        # or configuration
        if c is None:
            c = sysconfig.get_config_var('CXX')
        # or default value
        if c is None:
            from distutils import ccompiler
            c = ccompiler.get_default_compiler()
        # normalize names
        c = "msvc" if "msvc" in c else "unix"

        try:
            self.compiler.compiler_so.remove("-Wstrict-prototypes")
        except:
            pass
        try:
            self.compiler.compiler_so.remove("-O3")
        except:
            pass

        for e in self.extensions:
            e.extra_link_args.extend(lopt.get(c, []))
            e.extra_compile_args.extend(copt.get(c, []))

        # mac fix from https://stackoverflow.com/a/19147134
        if platform.system() == 'Darwin':
            for e in self.extensions:
                e.extra_link_args.append('-Wl,-rpath,@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@')

        if not @SKIP_BUILD@:
            build_ext.build_extensions(self)


# ------------------------------------- #
# Extension to link C++ files to python #
# ------------------------------------- #

mod_name = "@PY_NAME@"

ext = '.pyx' if with_cython else '.cpp'

extensions = Extension(
    mod_name + "._pygrowth", # name of extension
    sources = [("" if @MSVC@ else '@PROJECT_SOURCE_DIR@/pymodule/') + mod_name + '/_pygrowth' + ext],
    language = "c++",
    include_dirs = [
        '@PROJECT_SOURCE_DIR@',
        '@PROJECT_SOURCE_DIR@/kernel',
        '@PROJECT_SOURCE_DIR@/elements',
        '@PROJECT_SOURCE_DIR@/libgrowth',
        '@PROJECT_SOURCE_DIR@/spatial',
        '@PYMODULE_DIR@/' + mod_name,
		'@GEOS_INCLUDE_DIR@',
        np.get_include()
    ],
    extra_compile_args = [],
    extra_link_args = [],
    libraries = ['cgrowth_py@PYTHON_VERSION@'] + \
                (['libgrowth_py@PYTHON_VERSION@', 'kernel_py@PYTHON_VERSION@',
                  'elements_py@PYTHON_VERSION@', 'spatial_py@PYTHON_VERSION@']
                  if @MSVC@ else []),
    library_dirs = ['@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@',],
    runtime_library_dirs = [] if (@MSVC@ or @APPLE@) else ['@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@']
)

if with_cython:
    extensions = cythonize(extensions, gdb_debug=(not @MSVC@))
    clean_cpp('@PYMODULE_DIR@/' + mod_name + '/_pygrowth.cpp')
else:
    extensions = [extensions]


# ----- #
# Setup #
# ----- #

setup(
    name = mod_name,
    version = '@cgrowth_VERSION@',
    description = 'Package to study the growth of neuronal networks',
    package_dir = {} if @MSVC@ else {'': '@PYMODULE_DIR@'},
    packages = getpackages(
        "." if @MSVC@ else '@PYMODULE_DIR@',
        exclude=['dist', '_*', 'build', '*.egg-info']),

    # Include the non python files (c++ library):
    package_data = {mod_name: ['*.so', '*.dll', '*.pyd', '*.a', '*.dylib', '*.pxd']},
	include_package_data=False,

    ext_modules = extensions,
    cmdclass = {'build_ext': CustomBuildExt},

    author = 'SENeC Initiative',
    author_email = 'tanguy.fardet@univ-paris-diderot.fr',
    license = 'GNU General Public License v2 (GPLv2)',
    keywords = 'neuronal network growth simulation topology',
    zip_safe = False
)
