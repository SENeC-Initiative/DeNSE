#ifndef SPATIAL_TYPES_H
#define SPATIAL_TYPES_H
#ifndef GEOS_USE_ONLY_R_API
#define GEOS_USE_ONLY_R_API
#endif

// define whether Boost is greater than 1.67
#cmakedefine BOOST_1_67_PLUS

// C++ include
#include <cmath>
#include <memory>
#include <tuple>
#include <unordered_map>
#include <vector>

// Boost includes
#ifndef BOOST_1_67_PLUS
#include <boost/functional/hash.hpp>
#else
#include <boost/container_hash/hash.hpp>
#endif

#include <boost/geometry.hpp>
#include <boost/geometry/geometries/geometries.hpp>
#include <boost/geometry/geometries/point_xy.hpp>
#include <boost/range/iterator_range.hpp>
#include <boost/range/join.hpp>

// include GEOS C-API
#include <geos_c.h>

#include "config.hpp"


namespace bg  = boost::geometry;
namespace bgi = boost::geometry::index;


namespace growth
{

/*
 * Boost objects
 */

typedef bg::model::d2::point_xy<double> BPoint;
typedef bg::model::multi_point<BPoint> BMultiPoint;
typedef bg::model::segment<BPoint> BSegment;
typedef bg::model::linestring<BPoint> BLineString;
typedef bg::model::multi_linestring<BLineString> BMultiLineString;
typedef bg::model::ring<BPoint> BRing;
typedef bg::model::polygon<BPoint> BPolygon;
typedef bg::model::multi_polygon<BPolygon> BMultiPolygon;
typedef bg::model::box<BPoint> BBox;

typedef boost::variant<BPolygon, BMultiPolygon> BGeometry;

typedef std::shared_ptr<BPolygon> BPolygonPtr;
typedef std::shared_ptr<BMultiPolygon> BMultiPolygonPtr;
typedef std::shared_ptr<BGeometry> BGeometryPtr;


typedef std::vector<BPolygonPtr>::const_iterator seg_it;
typedef boost::iterator_range<seg_it> seg_range;


/*
 * Smart pointers
 */

class Area;
typedef std::shared_ptr<Area> AreaPtr;


/*
 * Geometrical objects
 */

typedef std::vector<double> Vector;
typedef std::array<double, 3> PointArray;
typedef std::array<Vector, 3> PointsArray;


/*
 * Growth cone motion
 */

typedef struct Filopodia
{
    std::vector<double> directions;
    std::vector<double> normal_weights;
    int size;
    double finger_length;
    double substrate_affinity;
    double wall_affinity;
} Filopodia;


typedef struct Move
{
    BPoint position;
    double module;
    double speed;
    double angle;
    double sigma_angle;
    Move()
        : position(BPoint())
        , module(0)
        , speed(0)
        , angle(0)
        , sigma_angle(0)
    {
    }
} Move;


/*
 * R-tree and ppatial object description into tuple and hash function
 */

// ObjectInfo tuple (neuron ID, neurite name, node ID, index on branch)
typedef std::tuple<stype, std::string, stype, stype> ObjectInfo;


namespace ndata
{
enum ndata
{
    NEURON,
    NEURITE,
    NODE,
    SEGMENT
};
}


// R-tree value
typedef std::pair<BBox, ObjectInfo> RtreeValue;

typedef std::unordered_map<ObjectInfo, BPolygonPtr, boost::hash<ObjectInfo>>
    space_tree_map;

typedef std::tuple<ObjectInfo, BBox, bool> box_tree_tuple;


/*
 * Synapses
 */

typedef std::vector<std::pair<stype, stype>> synapse_vec;
typedef std::vector<std::tuple<std::string, stype, stype>> synapse_ref;

typedef boost::range::joined_range<std::vector<BPoint>, std::vector<BPoint>>
    point_range;

} // namespace growth

#endif /* SPATIAL_TYPES_H */
