# -*- coding: utf-8 -*-
#
# conf_rtd.py
#
# This file is part of DeNSE.
#
# Copyright (C) 2019 SeNEC Initiative
#
# DeNSE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# DeNSE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DeNSE. If not, see <http://www.gnu.org/licenses/>.

"""
DeNSE documentation build configuration file.
"""

import errno
import os
import sys

from subprocess import call

try:
    import sphinx_bootstrap_theme
    with_bootstrap = @WITH_BOOTSTRAP@
except:
    with_bootstrap = False


# -- Setup all autosum then start --------------------------------------------

import fnmatch
import importlib
import inspect

def gen_autosum(source, target, module, autotype, dtype="all", ignore=None):
    '''
    Automatically write a sphinx-parsable file, adding a list of functions or
    classes to the autosummary method of sphinx, in place of the @autosum@
    keyword.

    Parameters
    ----------
    source : str
        Name of the input file, usually of the form "source.rst.in".
    target : str
        Name of the output file, usually "source.rst".
    module : str
        Name of the module on which autosummary should be performed.
    autotype : str
        Type of summary (normal for all, 'autofunction' or 'autoclass').
    dtype : str, optional (default: all)
        Type of object that should be kept ('func' or 'class'), depending on
        `autotype`.
    ignore : list, optional (default: None)
        Names of the objects that should not be included in the summary.
    '''
    # load module and get content
    mod = importlib.import_module(module)
    mod_dir = dir(mod)
    # set ignored classes
    ignore = [] if ignore is None else ignore
    # list classes and functions
    str_autosum = ''
    for member in mod_dir:
        if not member.startswith('_') and not member in ignore:
            m = getattr(mod, member)
            keep = 1
            if dtype == "func":
                keep *= inspect.isfunction(m)
            elif dtype == "class":
                keep *= inspect.isclass(m)
            else:
                keep *= inspect.isfunction(m) + inspect.isclass(m)
            if keep:
                if autotype == "summary":
                    str_autosum += '    ' + module + '.' + member + '\n'
                else:
                    str_autosum += '\n.. ' + autotype + ':: ' + member + '\n'
    # write to file
    with open(source, "r") as rst_input:
        with open(target, "w") as main_rst:
            for line in rst_input:
                if line.find("%autosum%") != -1:
                    main_rst.write(str_autosum)
                else:
                    main_rst.write(line)

# find all *.in files

inputs = []
for root, dirnames, filenames in os.walk("@CMAKE_CURRENT_SOURCE_DIR@"):
    for filename in fnmatch.filter(filenames, '*.rst.in'):
        inputs.append(os.path.join(root, filename))

for f in inputs:
    target = f[:-3]  # remove '.in'
    # find the module (what will come after dense, it is the name of the file)
    last_dot = target.rfind('.')
    last_slash = target.rfind('/')
    module = target[last_slash + 1:last_dot]
    if module != 'dense':
        module = 'dense.' + module
    gen_autosum(f, target, module, 'summary')


# mock _growth if not compiled
try:
    import dense
except:
    autodoc_mock_imports = ["dense._pygrowth"]


# Simlink to geometry.examples
src = os.path.abspath('@PROJECT_SOURCE_DIR@/src/pymodule/dense/environment/examples')
tgt = os.path.abspath('@CMAKE_CURRENT_SOURCE_DIR@/modules/examples/')

try:
    os.remove(tgt)               # remove existing simlink
except OSError as e:
    if e.errno != errno.ENOENT:  # errno.ENOENT = no such file or directory
        raise                    # raise if a different error occurred

os.symlink(src, tgt)


# General information about the project.
project = u'@PY_NAME@'
copyright = u'2017--2018, SENeC'
author = u'SENeC'


# -- Set doxygen/breathe --------------------------------------------------

root_path = os.path.abspath("..")
doc_path = os.path.abspath(".")
doxypath = doc_path + '/doxyfiles/xml'
sys.path.append(doc_path + '/breathe')
sys.path.append(doxypath)
sys.path.insert(0, root_path)
sys.path.insert(0, "@PYTHON_INSTALL_DIR@")

if @CPP_DOCS_AVAILABLE@:
    # run doxygen
    call(["doxygen", "Doxyfile"])


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.imgmath',
    'sphinx.ext.viewcode',
    'sphinx.ext.autosummary',
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
]

if @CPP_DOCS_AVAILABLE@:
    extensions.append('breathe')

breathe_projects = {project: doxypath}
breathe_default_project = project
breathe_projects_source = {project: '../'}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['@CMAKE_CURRENT_SOURCE_DIR@/_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

rst_epilog = """
.. |name| replace:: DeNSE
"""

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'@cgrowth_VERSION_MAJOR@.@cgrowth_VERSION_MINOR@.@cgrowth_VERSION_PATCHLEVEL@'
# The full version, including alpha/beta/rc tags.
release = u'@cgrowth_VERSION@'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = '@SPHINX_HTML_THEME@'
html_sidebars = {}
html_theme_options = {}
html_use_smartypants = False

if with_bootstrap:
    html_theme = 'dense_theme'
    html_theme_path = ['@CMAKE_CURRENT_SOURCE_DIR@/'] + \
                      sphinx_bootstrap_theme.get_html_theme_path()

    html_theme_options = {
        'navbar_links': [
            ("Modules", "py-modindex"),
            ("Index", "genindex"),
            ("GitHub", "https://github.com/SENeC-Initiative/DeNSE", True),
        ],

        # Render the next and previous page links in navbar. (Default: true)
        'navbar_sidebarrel': False,

        # Render the current pages TOC in the navbar. (Default: true)
        'navbar_pagenav': True,

        # Tab name for the current pages TOC. (Default: "Page")
        'navbar_pagenav_name': "Current",

        # Global TOC depth for "site" navbar tab. (Default: 1)
        # Switching to -1 shows all levels.
        'globaltoc_depth': 2,

        # Include hidden TOCs in Site navbar?
        #
        # Note: If this is "false", you cannot have mixed ``:hidden:`` and
        # non-hidden ``toctree`` directives in the same page, or else the build
        # will break.
        #
        # Values: "true" (default) or "false"
        'globaltoc_includehidden': "true",

        # Fix navigation bar to top of page?
        # Values: "true" (default) or "false"
        'navbar_fixed_top': "false",

        # Location of link to source.
        # Options are "nav" (default), "footer" or anything else to exclude.
        'source_link_position': "nav",

        # Bootswatch (http://bootswatch.com/) theme.
        'bootswatch_theme': "lumen"
    }

    html_sidebars = {'**': ['customtoc.html', 'searchbox.html']}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['@CMAKE_CURRENT_SOURCE_DIR@/_static']


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = '@PY_NAME@_doc'

html_favicon = '_static/dense_ico.png'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, '@PY_NAME@.tex', u'@PY_NAME@ Documentation',
     u'MSC\\_Neuro', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, '@PY_NAME@', u'@PY_NAME@ Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, '@PY_NAME@', u'@PY_NAME@ Documentation',
     author, '@PY_NAME@', 'One line description of project.',
     'Miscellaneous'),
]


# Example configuration for intersphinx: refer to the Python standard library.

intersphinx_mapping = {
    'ipython': ('http://ipython.org/ipython-doc/stable/', None),
    'matplotlib': ('http://matplotlib.org/', None),
    'numpy': ('http://docs.scipy.org/doc/numpy', None),
    'python': ('https://docs.python.org/3/', None),
    'scipy': ('http://docs.scipy.org/doc/scipy/reference', None),
    'shapely': ('https://shapely.readthedocs.io/en/latest/', None),
    'nngt': ('https://nngt.readthedocs.io/en/latest/', None),
    'pint': ('https://nngt.readthedocs.io/en/latest/', None),
}

napoleon_numpy_docstring = True
napoleon_use_admonition_for_notes = True
