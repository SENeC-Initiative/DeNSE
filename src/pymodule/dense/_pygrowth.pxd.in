#!/usr/bin/env cython
#-*- coding:utf-8 -*-
# cython: language_level=@PYTHON_VERSION_MAJOR@

""" Generation tools for NNGT """

from libc.stdint cimport uintptr_t

from libcpp cimport bool

from libcpp.pair cimport pair
from libcpp.set cimport set as cset
from libcpp.string cimport string
from libcpp.unordered_map cimport unordered_map
from libcpp.vector cimport vector


IF @MSVC@:
    ctypedef unsigned long stype
ELSE:
    ctypedef size_t stype

ctypedef unordered_map[string, Property] statusMap
ctypedef unordered_map[ string, vector[double] ] mapParams


# ---------------------- #
# Load the c++ functions #
# ---------------------- #

cdef extern from "../libgrowth/config.hpp" namespace "growth":
    ctypedef enum dtype:
        BOOL, DOUBLE, INT, SIZE, VEC_SIZE, VEC_LONG, STRING, VEC_STRING, MAP_DOUBLE

    cdef cppclass Property:
        Property() except +
        Property(double d, const string& dim) except +
        Property(int i, const string& dim) except +
        Property(stype ul, const string& dim) except +
        Property(const vector[stype]& v, const string& dim) except +
        Property(const vector[long]& v, const string& dim) except +
        Property(const string& s, const string& dim) except +
        Property(const vector[string]& v, const string& dim) except +
        Property(const unordered_map[string, double]& v, const string& dim) except +
        dtype data_type
        string dimension
        bool b
        double d
        int i
        stype ul
        vector[long] ll
        vector[stype] uu
        string s
        vector[string] ss
        unordered_map[string, double] md


cdef extern from "../libgrowth/elements_types.hpp" namespace "growth":
    ctypedef pair[vector[double], vector[double]] SkelNeurite
    ctypedef vector[vector[double]] SkelSomas

    ctypedef struct NodeProp:
        NodeProp() except +

        stype n_id
        stype p_id
        double diameter
        double dist_to_parent
        vector[double] position


cdef extern from "../libgrowth/growth_time.hpp" namespace "growth":
    cdef cppclass CTime "growth::Time":
        CTime() except +
        CTime(double seconds, unsigned char minutes, unsigned char hours,
              stype days) except +
        CTime(CTime initial_time, unsigned long steps) except +
        void set_sec(double seconds)
        void set_min(char minutes)
        void set_hour(char hours)
        void set_day(char days)
        double get_sec() const
        char get_min() const
        char get_hour() const
        stype get_day() const
        double get_total_seconds() const


# kernel functions

cdef extern from "../module.hpp" namespace "growth":
    cdef void init_growth_(int* argc, char** argv[] )

    cdef void finalize_growth_()

    cdef stype create_objects_(const string& object_name,
                                const vector[statusMap]& obj_params
                                ) except +

    cdef stype create_neurons_(const vector[statusMap]& neuron_params,
                                const vector[statusMap]& axon_params,
                                const vector[statusMap]& dendrites_params
                                ) except +

    cdef void create_neurites_(const vector[stype]& neurons,
                               stype num_neurites,
                               const vector[statusMap]& params,
                               const vector[string]& neurite_types,
                               const vector[double]& angles,
                               const vector[string]& names) except +

    cdef void delete_neurons_(const vector[stype] &neurons) except +

    cdef void delete_neurites_(const vector[stype] &neurons,
                               const vector[string] &names) except +

    cdef void get_environment_(GEOSGeometry*& environment,
                               vector[GEOSGeometry*]& areas,
                               vector[double] heights, vector[string]& names,
                               vector[unordered_map[string, double]]& properties
                               ) except +

    cdef void set_environment_(
        GEOSGeometry* environment, const vector[GEOSGeometry*]& areas,
        const vector[double]& heights, vector[string]& names,
        const vector[unordered_map[string, double]]& properties
        ) except +

    cdef const CTime get_current_time_() except +

    cdef statusMap get_kernel_status_() except +

    cdef stype get_num_objects_() except +

    cdef stype get_num_created_objects_() except +

    cdef void get_skeleton_(
        SkelNeurite& axon, SkelNeurite& dendrites, SkelNeurite& nodes,
        SkelNeurite& growth_cones, SkelSomas& somas,
        vector[stype] gids, unsigned int resolution) except +

    cdef void get_geom_skeleton_(
        vector[stype] gids, vector[GEOSGeometry*]& axons,
        vector[GEOSGeometry*]& dendrites, vector[stype]& dendrite_gids,
        vector[vector[double]]& somas) except +
    
    cdef void generate_synapses_(
        bool crossings_only, double density,
        bool only_new_syn, bool autapse_allowed,
        const cset[stype] &presyn_pop, const cset[stype] &postsyn_pop,
        vector[stype] &presyn_neurons, vector[stype] &postsyn_neurons,
        vector[string] &presyn_neurites, vector[string] &postsyn_neurites,
        vector[stype] &presyn_nodes, vector[stype] &postsyn_nodes,
        vector[stype] &presyn_segments, vector[stype] &postsyn_segments,
        vector[double] &pre_syn_x, vector[double] &pre_syn_y,
        vector[double] &post_syn_x, vector[double] &post_syn_y) except +
    
    cdef void get_distances_(stype gid, const string &neurite, stype node,
                             stype segment, double &dist_to_parent,
                             double &dist_to_soma) except +

    cdef void get_swc_(string output_file,
        vector[stype] gids, unsigned int resolution) except +

    cdef statusMap get_status_(stype gid) except +

    cdef statusMap get_neurite_status_(stype gid,
                                      const string& n_type, const string& level,
                                      ) except +

    cdef vector[stype] get_neurons_() except +

    cdef bool is_neuron_(stype gid) except +
    cdef bool is_neurite_(stype gid, const string& neurite) except +

    cdef vector[string] get_neurites_(stype gid) except +

    cdef void get_branches_data_(stype neuron, const string& neurite_name,
                                 vector[vector[vector[double]]]& points,
                                 vector[double]& diameters,
                                 vector[int]& parents,
                                 vector[stype]& nodes,
                                 stype start_point) except +

    cdef void get_defaults_(const string& object_name,
                            const string& object_type,
                            const string& gc_model,
                            bool detailed,
                            statusMap &status) except +

    cdef string get_default_model_() except +

    cdef void get_models_(unordered_map[string, string]& models,
                          bool abbrev) except +

    cdef void get_recorder_type_(stype gid, string& level,
                                 string& event_type) except +

    cdef bool get_next_recording_(stype gid, vector[Property]& ids,
                                  vector[double]& values) except +

    cdef bool get_next_time_(stype gid, vector[Property]& ids,
                             vector[double]& values,
                             const string& time_units) except +

    cdef string object_type_(stype gid) except +

    cdef void reset_kernel_() except +

    cdef void set_kernel_status_(statusMap status_dict,
                                 string c_simulation_ID) except +

    cdef string get_simulation_id_() except +

    cdef double get_state_(stype gid, const string& level,
                           const string& variable) except +

    cdef vector[string] get_elongation_types_() except +

    cdef vector[string] get_steering_methods_() except +

    cdef vector[string] get_direction_selection_methods_() except +

    cdef void set_status_(stype gid, statusMap neuron_status,
                          statusMap axon_status,
                          statusMap dendrites_status) except +

    cdef void set_neurite_status_(stype neurton, string neurite,
                                  statusMap status) except +

    cdef void simulate_(const CTime& simtime) except +

    cdef void test_random_generator_(vector[vector[double]]& values,
                                     stype size) except +

    cdef bool walk_neurite_tree_(stype neuron, string neurite,
                                 NodeProp& np) except +


# ---------------------- #
# GEOS-related functions #
# ---------------------- #

cdef extern from "geos_c.h":
    ctypedef struct GEOSGeometry


cdef inline GEOSGeometry *geos_from_shapely(shapely_geom) except *:
    '''
    Get the GEOS geometry pointer from the given shapely geometry.
    '''
    # [IMPORTANT] tell Shapely to NOT delete the C++ object when the python
    # wrapper goes out of scope!
    shapely_geom._other_owned = True
    # [/IMPORTANT]
    cdef uintptr_t geos_geom = shapely_geom._geom
    return <GEOSGeometry *>geos_geom
