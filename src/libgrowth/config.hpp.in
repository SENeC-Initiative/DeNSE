#ifndef CONFIG_H
#define CONFIG_H

#include <memory>
#include <random>
#include <string>
#include <unordered_map>
#include <vector>

#include "growth_names.hpp"


namespace growth
{

// Define whether MPI is available
#cmakedefine WITH_MPI
// Define whether OpenMP is available
#cmakedefine WITH_OMP
#cmakedefine MSVC

#ifdef MSVC
typedef unsigned long stype;
#else
typedef size_t stype;
#endif

typedef enum
{
    BOOL,
    DOUBLE,
    INT,
    SIZE,
    VEC_SIZE,
    VEC_LONG,
    STRING,
    VEC_STRING,
    MAP_DOUBLE
} dtype;


class Property
{
  public:
    Property();
    Property(int i_, const std::string &dim);
    Property(stype ul_, const std::string &dim);
    Property(bool b_, const std::string &dim);
    Property(char const arr[], const std::string &dim);
    Property(double d_, const std::string &dim);
    Property(const std::vector<long> &v, const std::string &dim);
    Property(const std::vector<stype> &v, const std::string &dim);
    Property(std::string s_, const std::string &dim);
    Property(const std::vector<std::string> &v, const std::string &dim);
    Property(const std::unordered_map<std::string, double> &v,
             const std::string &dim);

    Property(const Property &prop);

    Property &operator=(const Property &prop);

    ~Property();

    dtype data_type;
    std::string dimension;

    union {
        bool b;
        double d;
        int i;
        stype ul;
        std::vector<long> ll;
        std::vector<stype> uu;
        std::string s;
        std::vector<std::string> ss;
        std::unordered_map<std::string, double> md;
    };
};

typedef std::unordered_map<std::string, Property> statusMap;

// getting/setting parameters from a statusMap/statusMap

inline bool get_param(const statusMap &map, const std::string &key,
                      bool &result);
inline bool get_param(const statusMap &map, const std::string &key,
                      double &result);
inline bool get_param(const statusMap &map, const std::string &key,
                      int &result);
inline bool get_param(const statusMap &map, const std::string &key,
                      stype &result);
inline bool get_param(const statusMap &map, const std::string &key,
                      std::vector<stype> &result);
inline bool get_param(const statusMap &map, const std::string &key,
                      std::vector<long> &result);
inline bool get_param(const statusMap &map, const std::string &key,
                      char *&result);
inline bool get_param(const statusMap &map, const std::string &key,
                      std::string &result);
inline bool get_param(const statusMap &map, const std::string &key,
                      std::vector<std::string> &result);
inline bool get_param(const statusMap &map, const std::string &key,
                      std::unordered_map<std::string, double> &result);

inline void set_param(statusMap &map, const std::string &key, const bool &value,
                      const std::string &dim);
inline void set_param(statusMap &map, const std::string &key,
                      const double &value, const std::string &dim);
inline void set_param(statusMap &map, const std::string &key, const int &value,
                      const std::string &dim);
inline void set_param(statusMap &map, const std::string &key,
                      const stype &value, const std::string &dim);
inline void set_param(statusMap &map, const std::string &key,
                      const std::vector<stype> &value, const std::string &dim);
inline void set_param(statusMap &map, const std::string &key,
                      const std::vector<long> &value, const std::string &dim);
inline void set_param(statusMap &map, const std::string &key,
                      const std::string &value, const std::string &dim);
inline void set_param(statusMap &map, const std::string &key,
                      const std::vector<std::string> &value,
                      const std::string &dim);
inline void set_param(statusMap &map, const std::string &key,
                      const std::unordered_map<std::string, double> &value,
                      const std::string &dim);
} // namespace growth


#include "config_impl.hpp"

#endif // CONFIG_H
